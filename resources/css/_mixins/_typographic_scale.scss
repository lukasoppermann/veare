/*
  To the Power off N function
 */
@function power($base, $exponent) {
  $result: 1;

  @for $i from 1 through $exponent {
    $result: $result * $base;
  }

  @return $result;
}

/*
  Create a named typoghraphic scale
 */
@mixin create-type-scale($base: null, $scale: null, $name: "default", $increase: 7, $decrease: 2) {
  @if $base == null {
    @error "All $base and $scale must be set. $name is 'default' if not specified";
  }
  // small sizes
  @for $i from 1 through $decrease {
    --ts-#{$name}--#{$decrease - $i + 1}: #{round($base / power($scale, $decrease - $i + 1) * 10)/10};
  }
  // set default
  --ts-#{$name}-1: #{$base};
  // increasing sizes
  @for $i from 2 through $increase {
    --ts-#{$name}-#{$i}: #{round($base * power($scale, $i - 1) * 10)/10};
  }
}

/*
  Get a value from the typographic scale for your font
 */
@mixin type-scale($factor: 1, $scale: "default") {
  $lineHeights: (
    -2: 1.5,
    -1: 1.5,
    1: 1.5,
    2: 1.4,
    3:  1.3,
    4:  1.3,
    5:  1.2,
    6:  1.1,
    7:  1.1,
  );

  @if var(--ts-#{$scale}-#{$factor}) != null {
    $lineHeightFactor: 1.5;
    @if map_has_key($lineHeights, $factor) {
      $lineHeightFactor: map_get($lineHeights, $factor);
    }
    font-size: var(--ts-#{$scale}-#{$factor});
    line-height: calc(var(--ts-#{$scale}-#{$factor}) * #{$lineHeightFactor});
  }
  @elseif {
    @error "Scale #{$scale} does not exist or Factor: #{$factor} is out of range.";
  }
}
